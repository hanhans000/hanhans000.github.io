* {
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
}

#totalDuration {
  color: rgb(7, 6, 14);
}

body {
  height: 100vh;
  background-color: rgb(7, 6, 14);
}

.audio-player-wrapper {
  display: flex;
  flex-direction: column;
  width: 60%;
  max-width: 800px;
  min-width: 650px;
  margin: 0 auto;
  overflow: hidden;
}

/* because I want to overlay the play icon on the audio they need to be in their own wrapper */
.audio-element-wrapper {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  max-width: 70%;
}

#audioElement {
  width: 100%;
  grid-column: 1/2;
  grid-row: 1/2;
}

#audioPlayOverlay {
  width: 8rem;
  height: 8rem;
  grid-column: 1/-1;
  grid-row: 1/-1;
  justify-self: center;
  align-self: center;
  opacity: 0.6;
  pointer-events: none;
  display: none;
  filter: blur(5px);
  z-index: 4;
}

.audio-controls-wrapper {
  display: flex;
  justify-content: center;
}
#controlsWrapper {
  display: none;
}

.audio-control-button {
  width: 2rem;
  height: 2rem;
  padding: 0.1rem;
  border: none;
  cursor: pointer;
  background-size: contain;
}
.audio-control-button:hover {
  background-color: var(--col-05);
}

.button-icon {
  pointer-events: none;
  /* ensures that the user interacts with the button as a whole and not just the icon. */
}

#playButton {
  background-image: url("play.png");
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  z-index: 5;
  grid-column: 13/1;
  grid-row: 15;
  align-self: top;
  display: block;
  margin-left: auto;
  margin-right: auto;
  width: 60%;
  transform: translate(-50px, 10px);
}

#prevButton {
  background-image: url("previoustrackbutton.png");
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  z-index: 5;
  grid-column: 16;
  grid-row: 16 / span 17;
  align-self: top;
  display: block;
  margin-left: auto;
  margin-right: auto;
  transform: translate(20px, 11px);
  width: 20px;
  height: 20px;
}

#nextButton {
  background-image: url("nexttrackbutton.png");
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  z-index: 5;
  grid-column: 15;
  grid-row: 16 / span 17;
  align-self: top;
  display: block;
  transform: translate(20px, 11px);
  width: 20px;
  height: 20px;
}

#unmuteButton {
  background-image: url("unmute.png");
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  z-index: 5;
  grid-column: 18/7;
  grid-row: 16 / span 17;
  align-self: top;
  display: block;
  margin-left: auto;
  margin-right: auto;
  transform: translateY(9px);
  width: 25px;
  height: 25px;
}

#muteButton {
  background-image: url("mute.png");
  background-color: transparent;
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  z-index: 5;
  grid-column: 21/7;
  grid-row: 16 / span 17;
  align-self: top;
  display: block;
  margin-left: auto;
  margin-right: auto;
  transform: translate(10px, 10px);

  width: 25px;
  height: 25px;
}

.audio-progress-bar {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  border: none;
  height: 1rem;
  flex-grow: 1;
  cursor: pointer;
  background-color: rgb(255, 255, 255);
  opacity: 5%;
  box-shadow: 0 2px 3px var(--col-02) inset;
  width: 100%;
}

.progressSlide {
  position: relative;
  width: 37px;
  height: 45px;
  background-image: url("progressslide.png");
  border-radius: 500px;
  top: -18px;
  background-size: contain;
  /* setting the pointer event to none so that you can still click the progress bar that is underneath  */
  pointer-events: none;
  color: rgb(20, 20, 20);
  filter: drop-shadow(0 0 0.2rem rgb(25, 25, 25));
}

/* changing the progress value (the filled portion of the progress bar)  */
::-webkit-progress-value {
  background-color: rgb(255, 255, 255);
}

.containerForProgress {
  width: 140%;
  height: auto;
  align-self: top;
  grid-column: 4/9;
  grid-row: 17 / span 17;
  z-index: 5;
  display: block;
  margin-left: auto;
  margin-right: auto;
  pointer-events: all;
  transform: translateY(-23px);
}

.rotateDisk {
  width: 80%;
  height: auto; /* Use 'auto' for proportional height based on the image aspect ratio */
  animation: rotation 7s infinite linear;
  /* setting initial animation state to paused so that the disk doesnt turn until play is pressed*/
  animation-play-state: paused;
  /* pointer-events: none; */
  padding: 10%;
  grid-column: 1/-1;
  grid-row: 8/9;
  z-index: 1;
  align-self: center;
  display: block;
  margin-left: auto;
  margin-right: auto;
  pointer-events: all;
}

/* Here Is the content holder grid setup I have created to be able to space out the elements how I like */
.contentHolder {
  color: rgb(65, 215, 229);
  text-align: center;
  display: grid;
  grid-template-columns: repeat(20, 1fr);
  grid-template-rows: repeat(20, 1fr);
  width: 100%;
}

.mediaPlayerOvertop,
.mediaPlayerBase,
.rotateDisk {
  grid-row: 1/-1;
}
/* this was a grid element that I created to test the spacing and visualise the css grid within my browser while i was creating the page. I ended up discovering a function within firefox that showed the layout in a clearer way with numbers live along the grid that made the designing process much easier.  */
.grid-item {
  border: 1px solid black; /* Add a border to grid items */
  padding: 10px; /* Add some padding for spacing within grid items */
  text-align: center; /* Center content within grid items */
  z-index: 3;
}

.mediaPlayerBase {
  grid-column: 1/-1;
  width: 100%;
}

/* I rendered out my media player I modelled in blender with the camera limit set so that only the sections that are over the top of the disk are visible and the background wouldnt render below is my css for placing this png */
.mediaPlayerOvertop {
  grid-column: 1/-1;
  width: 100%;
  z-index: 3;
  pointer-events: none;
}

.currentLengthInt {
  grid-column: 15 / 17;
  grid-row: 15 / 15;
  align-self: center;
  z-index: 5;
  display: block;
  margin-left: auto;
  margin-right: auto;
  pointer-events: all;
  transform: translate(18px, -1px);
  font-size: 1.7rem; /* Increase the font size for the current time */
  font-family: "ATF Alternate Gothic", sans-serif; /* Apply ATF Alternate Gothic */
  font-family: "alternate-gothic-atf", sans-serif;
  font-weight: 500;
}

.assets {
  width: auto;
  height: 100px;
}

.resourcesHolder {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
}

@keyframes loadingAnimation {
  100% {
    background-position: 50% 0%;
  }
}

@keyframes rotation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}

/* list for songs */

.tracklistOvertop {
  z-index: 5;
  grid-column: 19/14;
  grid-row: 2 / span 17;
  width: 100%;
  z-index: 2;
  pointer-events: none;
  transform: translateX(5px);
  transform: translateY(48px);
}

* {
  box-sizing: border-box;
  background-origin: border-box;
  margin: 0;
}

ul#trackList {
  list-style-type: none;
  padding: 0;
  margin: 10px 2px;
  grid-column: 19/14;
  grid-row: 10/3;
  width: 150px; /* Fixed width to create a square-like area */
  height: 150px; /* Fixed height */
  z-index: 5;
  font-family: "Reenie Beanie", cursive;
}

.track-button {
  display: block;
  margin-bottom: 5px;
  background-color: #ffffff;
  color: rgb(0, 0, 0);
  border: none;
  cursor: pointer;
  text-align: left;
  background-color: transparent;
  font-family: "Reenie Beanie", cursive; /* Apply Reenie Beanie font */
  font-size: 1rem;
  text-align: center;
}

/* Define a class for active track */
.track-button.active {
  color: rgb(255, 0, 0); /* Adjust text color for active state */
}

.document {
  text-align: center;
  font-size: 1.5rem;
  color: white;
  margin-bottom: 20px;
  font-family: "ATF Alternate Gothic", sans-serif;
  font-family: "alternate-gothic-atf", sans-serif;
  line-height: 1.6;
  padding: 10px 20px;
  background-color: rgba(0, 0, 0, 0.7);
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}
